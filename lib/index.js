// Generated by CoffeeScript 1.8.0
(function() {
  var flatten, unflatten, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  _ = require('underscore');

  exports.flatten = flatten = function(obj, options, parentKey) {
    var childKey, flattened, items, key, value;
    if (parentKey == null) {
      parentKey = '';
    }
    options = _.defaults(options, {
      skip: [],
      connector: '_'
    });
    items = [];
    for (childKey in obj) {
      value = obj[childKey];
      if (parentKey) {
        key = parentKey + options.connector + childKey;
      } else {
        key = childKey;
      }
      if (typeof value === 'object' && !(__indexOf.call(options.skip, key) >= 0)) {
        flattened = flatten(value, options, key);
        items.push.apply(items, _.pairs(flattened));
      } else {
        items.push([key, value]);
      }
    }
    return _.object(items);
  };

  exports.unflatten = unflatten = function(flatObj, options) {
    var baseKey, k, obj, subKey, subObj, v, _ref;
    options = _.defaults(options, {
      connector: '_'
    });
    if (typeof flatObj === 'string') {
      flatObj = JSON.parse(flatObj);
    }
    obj = {};
    for (k in flatObj) {
      v = flatObj[k];
      if ((k.indexOf(options.connector)) === -1) {
        obj[k] = v;
      } else {
        _ref = k.split(options.connector), baseKey = _ref[0], subKey = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
        subKey = subKey.join(options.connector);
        subObj = _.object([[subKey, v]]);
        if (obj[baseKey] == null) {
          obj[baseKey] = {};
        }
        _.extend(obj[baseKey], unflatten(subObj, options));
      }
    }
    return obj;
  };

}).call(this);
